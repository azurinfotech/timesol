<?php
define('CONST_PERM_REQUEST', 'send request');
define('CONST_PERM_EDIT_REQUEST', 'edit request');
define('CONST_PERM_ACCESS_ADMINID', 'access admin ID');
/**
 * Implements hook_permission().
 */
function request_permission() {
  return array(
    CONST_PERM_REQUEST => array('title' => t('Send Request')),
    CONST_PERM_EDIT_REQUEST => array('title' => t('Edit Request')),
    CONST_PERM_ACCESS_ADMINID => array('title' => t('Access Admin ID')),
  );
}

/**
 * Implements hook_menu().
 */
function request_menu() {
  $items['send/request'] = array(
    'title' => 'Request',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('request_form'),
    'access arguments' => array(CONST_PERM_REQUEST),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['request/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'request_form',
      1
    ),
    'access arguments' => array(CONST_PERM_EDIT_REQUEST),
    'type' => MENU_LOCAL_TASK,
  );
  $items['adminid/autocomplete'] = array(
    'page callback' => 'admin_autocomplete',
    'access arguments' => array(CONST_PERM_ACCESS_ADMINID),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * EMPLOYEE REQUEST Form.
 */
function request_form($form, &$form_state, $eid = 0, $rid = 0) {
  $edit = NULL;
  if ($rid != 0) {
    $query = db_select('request', 'req') -> fields('req', array(
      'rid',
      'eid',
      'adid',
      'fid',
      'rtype'
    ));
    $query -> leftJoin('employee', 'e', 'e.eid = req.eid');
    $edit = $query -> condition('req.eid', $eid) -> execute() -> fetchobject();
  }

  $form['rid'] = array(
    '#type' => 'hidden',
    '#title' => t('Request ID'),
    '#value' => isset($edit) ? $edit -> rid : '',
  );
  $form['eid'] = array(
    '#type' => 'hidden',
    '#title' => t('Employee ID'),
    '#value' => isset($edit) ? $edit -> eid : '',
  );
  $form['adid'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin Id'),
    '#required' => TRUE,
    '#autocomplete_path' => 'adminid/autocomplete',
  );
  $form['fid'] = array(
    '#type' => 'managed_file',
    '#title' => t('File ID'),
    '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif'),
    '#upload_validators' => array('file_validate_extensions' => array('jpg jpeg png gif'), ),
    '#upload_location' => 'public://docs/',
  );
  $form['rtype'] = array(
    '#type' => 'select',
    '#title' => t('Type of request'),
    '#options' => request_type(),
    '#default_value' => isset($edit) ? $edit -> rtype : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('class' => array('emp_save')),
    '#value' => t('Save'),
  );
  return $form;
}

//Type of Request
function request_type($typ = '') {
  static $types;
  if (!isset($types)) {
    $types = array(
      1 => t('Project'),
      2 => t('Time'),
      3 => t('Reimbursement'),
    );
  }
  if (empty($typ)) {
    return $types;
  }
  elseif (isset($types[$typ])) {
    return $types[$typ];
  }
  else {
    return t('Invalid Option');
  }
}

/**
 * employee status
 */
function request_status($sta = '') {
  static $stat;
  if (!isset($stat)) {
    $stat = array(
      1 => t('Approved'),
      2 => t('Pending'),
    );
  }
  if (empty($sta)) {
    return $stat;
  }
  elseif (isset($stat[$sta])) {
    return $stat[$sta];
  }
  else {
    return t('Invalid Option');
  }
}

function admin_autocomplete($string = '') {
  $matches = array();
  $query = db_select('employee', 'e') -> fields('e', array(
    'firstname',
    'lastname',
    'eid'
  )) -> condition('e.firstname', '%' . db_like($string) . '%', 'LIKE');
  $res = $query -> execute();
  foreach ($res as $row) {
    $matches[$row -> firstname . $row -> lastname . " [Id:$row->eid]"] = check_plain($row -> firstname . " " . $row -> lastname);
  }
  return drupal_json_output($matches);
}

/**
 * Request Form Submit function.
 */
function request_form_submit($form, &$form_state) {
	 	if(!empty($form_state['values']['fid'])){
	 $file = file_load($form_state['values']['fid']);
    // Change status to permanent.
    $file -> status = FILE_STATUS_PERMANENT;
    // Save.
    $uploaded = file_save($file);
    if ($uploaded == TRUE) {
      drupal_set_message(t('The file has been uploaded.'));
    }
    else {
      drupal_set_message(t('The file could not be uploaded. Please contact the site administrator.'), 'error' );
      }}
      if (empty($form_state[
    'values']['rid'])) {
    $emp = azur_user_return_employee();
    $values = array(
      'eid' => $emp -> eid,
      'fid' => $form_state['values']['fid'],
      'sdate' => time(),
      'rstatus' => 0,
      'rtype' => $form_state['values']['rtype'],
      'adid' => autocomplete_get_id_func($form_state['values']['adid']),
    );
    $query = db_insert('request') -> fields($values) -> execute();
  }
  else {
  	$rid = $form_state['values']['rid'];
    $updated = db_update('request') -> fields(array(
      'fid' => $form_state['values']['fid'],
      'rstatus' => 0,
      'adid' => autocomplete_get_id_func($form_state['values']['adid']),
      'rtype' => $form_state['values']['rtype'],
    )) -> condition('rid', $rid, '=') -> execute();
  }

}

/**
 * Implements hook_theme
 */
function request_theme() {
  return array('request_form' => array(
      'render element' => 'form',
      'template' => 'request-form'
    ), );
}
