<?php

define('CONST_PERM_REQUEST', 'send request');
define('CONST_PERM_EDIT_REQUEST', 'edit request');
define('CONST_PERM_ACCESS_ADMINID', 'access admin ID');

/**
 * Implements hook_permission().
 */
function request_permission() {
  return array(
    CONST_PERM_REQUEST => array('title' => t('Send Request')),
    CONST_PERM_EDIT_REQUEST => array('title' => t('Edit Request')),
    CONST_PERM_ACCESS_ADMINID => array('title' => t('Access Admin ID')),
  );
}

/**
 * Implements hook_menu().
 */
function request_menu() {
  $items['requests/add'] = array(
    'title' => 'Add Request',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('request_form'),
    'access arguments' => array(CONST_PERM_REQUEST),
    'type' => MENU_LOCAL_TASK,
  );
//  $items['requests'] = array(
//    'title' => 'Request',
//    'access arguments' => array(CONST_PERM_REQUEST),
//    'type' => MENU_NORMAL_ITEM,
//  );

  $items['request/%/edit'] = array(
    'title' => 'Edit your Request.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'request_form',
      1
    ),
    'access arguments' => array(CONST_PERM_EDIT_REQUEST),
    'type' => MENU_LOCAL_TASK,
  );
  $items['adminid/autocomplete'] = array(
    'page callback' => 'admin_autocomplete',
    'access arguments' => array(CONST_PERM_ACCESS_ADMINID),
    'type' => MENU_CALLBACK,
  );
  $items['approve/%/request'] = array(
    'page callback' => 'approve_reject_request',
    'page arguments' => array(
      0,
      1
    ),
    'access arguments' => array(CONST_PERM_ACCESS_ADMINID),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['reject/%/request'] = array(
    'page callback' => 'approve_reject_request',
    'page arguments' => array(
      0,
      1
    ),
    'access arguments' => array(CONST_PERM_ACCESS_ADMINID),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * 
 * @global type $user
 * @param type $form
 * @param type $form_state
 * @param type $eid
 * The employee id.
 * @param type $rid
 * The request id for editing.
 * @return array
 */
function request_form($form, &$form_state, $eid = 0, $rid = 0) {
  drupal_set_title('Add Request');
  $edit = NULL;
  if ($rid != 0) {
    $query = db_select('request', 'req')->fields('req', array(
      'rid',
      'eid',
      'adid',
      'descp',
      'fid',
      'rtype'
    ));
    $query->leftJoin('employee', 'e', 'e.eid = req.eid');
    $query->condition('og.entity_type', 'user', 'LIKE');
    $edit = $query->condition('req.eid', $eid)->execute()->fetchobject();
  }
  if ($eid == 0) {
    global $user;
    $eid = db_select('employee', 'e')->fields('e', array('eid'))->condition('uid', $user->uid, '=')->execute()->fetchField();
  }
  $options[azur_employee_get_manager_id($eid)] = t('Supervisor');
  $options[0] = t('Administrator');
  $form['assign_to'] = array(
    '#type' => 'select',
    '#title' => t('Assign to'),
    '#description' => t('Assign the request to.'),
    '#options' => $options,
    '#default_value' => isset($edit) ? $edit->adid : '',
    '#weight' => -10
  );
  $form['request_type'] = array(
    '#type' => 'select',
    '#title' => t('Request type'),
    '#description' => t('Select the type of request you wist to initiate'),
    '#options' => request_type(),
    '#default_value' => isset($edit) ? $edit->rtype : '',
    '#weight' => -9,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('Enter a summary for the request.'),
    '#default_value' => isset($edit) ? $edit->descp : '',
    '#weight' => -7,
  );
  $form['file_id'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload Receipts and Invoices'),
    '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif pdf'),
    '#help' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif pdf'),
    '#upload_validators' => array('file_validate_extensions' => array('jpg jpeg png gif pdf'),),
    '#upload_location' => 'public://docs/',
    '#states' => array('visible' => array(':input[name="request_type"]' => array('value' => 3),),),
    '#weight' => -8
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('class' => array('emp_save')),
    '#value' => t('Save'),
    '#weight' => -6
  );
  return $form;
}

/**
 * @param string $typ
 * @return array|null|string
 */
function request_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['file_id'])) {
    $file = file_load($form_state['values']['file_id']);
    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    $uploaded = file_save($file);
    if ($uploaded == FALSE) {
      form_set_error('file_id', t('The File was not uploaded correctly please try uploading it again'));
    }
  }
}

//Type of Request
function request_type($typ = '') {
  static $types;
  if (!isset($types)) {
    $types = array(
      1 => t('New project'),
      2 => t('Time-Sheet edit'),
      3 => t('Reimbursement'),
      4 => t('Time-off')
    );
  }
  if (empty($typ)) {
    return $types;
  }
  elseif (isset($types[$typ])) {
    return $types[$typ];
  }
  else {
    return t('Invalid Option');
  }
}

/**
 * Request status
 */
function request_status($sta = '') {
  static $stat;
  if (!isset($stat)) {
    $stat = array(
      1 => t('Pending'),
      2 => t('Approved'),
      3 => t('Rejected')
    );
  }
  if (empty($sta)) {
    return $stat;
  }
  elseif (isset($stat[$sta])) {
    return $stat[$sta];
  }
  else {
    return t('Invalid Option');
  }
}

function admin_autocomplete($string = '') {
  $matches = array();
  $new_string = NULL;
  $pos = strpos($string, ',');
  if ($pos) {
    $sub_str = explode(',', $string);
    $count = count($sub_str);
    $new_string = trim($sub_str[$count - 1]);
  }
  $query = db_select('employee', 'e')->fields('e', array(
    'firstname',
    'lastname',
    'eid'
  ));
  if ($new_string == NULL) {
    $query->condition('e.firstname', '%' . db_like($string) . '%', 'LIKE');
  }
  else {
    $query->condition('e.firstname', '%' . db_like($new_string) . '%', 'LIKE');
  }
  $res = $query->execute();
  foreach ($res as $row) {
    if ($new_string == NULL) {
      $matches[$row->firstname . $row->lastname . " [Id:$row->eid]"] = check_plain($row->firstname . " " . $row->lastname);
    }
    else {

      $matches[substr($string, 0, strlen($string) - strlen($new_string)) . $row->firstname . $row->lastname . " [Id:$row->eid]"] = check_plain($row->firstname . " " . $row->lastname);
    }
  }
  return drupal_json_output($matches);
}

/**
 * Request Form Submit function.
 */
function request_form_submit($form, &$form_state) {
  //1. Check if user want to create a new request or edit existing request
  //2. If new request insert
  //3. If existing request update.
  if (empty($form_state['values']['rid'])) {
    $adid = 0;
    $emp = azur_user_return_employee();
    if ($form_state['values']['assign_to'] == 0) {
      $admins = variable_get('intra_admin');
      foreach ($admins as $key => $value) {
        if ($emp->country == $key) {
          $adid = $value;
        }
      }
    }
    else {
      $adid = $form_state['values']['assign_to'];
    }
    $values = array(
      'eid' => $emp->eid,
      'fid' => $form_state['values']['file_id'],
      'sdate' => time(),
      'rstatus' => 1,
      'rtype' => $form_state['values']['request_type'],
      'descp' => $form_state['values']['description'],
      'adid' => $adid,
    );
    $query = db_insert('request')->fields($values)->execute();
  }
  else {
    $rid = $form_state['values']['rid'];
    $adid = 0;
    if ($form_state['values']['assign_to'] == 0) {
      $admins = variable_get('intra_admin');
      foreach ($admins as $key => $value) {
        if ($emp->country == $key) {
          $adid = $value;
        }
      }
    }
    else {
      $adid = $form_state['values']['assign_to'];
    }
    $updated = db_update('request')->fields(array(
          'fid' => $form_state['values']['file_id'],
          'rstatus' => 1,
          'adid' => $adid,
          'rtype' => $form_state['values']['rtype'],
          'descp' => $form_state['values']['description'],
        ))->condition('rid', $rid, '=')->execute();
  }
  $mgr = azur_employee_name($form_state['values']['assign_to']);
  $message = t('Your request has been created and assigned to :mgr', array(':mgr' => $mgr));
  drupal_set_message($message);
  drupal_goto('requests');
}

/**
 * Implements hook_theme
 */
function request_theme() {
  return array('request_form' => array(
      'render element' => 'form',
      'template' => 'request-form'
    ),);
}

/**
 * hook_views_api for views module.
 */
function request_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'request') . '/views',
  );
}

/**
 * Function to approve or reject requests.
 */
function approve_reject_request($action, $rid) {
  if ($action == 'approve') {
    db_update('request')->fields(array('rstatus' => 2))->condition('rid', $rid, '=')->execute();
    $request = db_select('request', 'req')->fields('req', array('eid', 'rtype', 'sdate'))->execute()->fetchObject();
    $employee = azur_employee_name($request->eid);
    $type = request_type($request->rtype);
    drupal_set_message(t('The :request created by :employee on :created was approved by you', array(':request' => $type, ':employee' => $employee, ':created' => date('M/d/Y', $request->sdate))));
  }
  else if ($action == 'reject') {
    db_update('request')->fields(array('rstatus' => 3))->condition('rid', $rid, '=')->execute();
    $request = db_select('request', 'req')->fields('req', array('eid', 'rtype', 'sdate'))->execute()->fetchObject();
    $employee = azur_employee_name($request->eid);
    $type = request_type($request->rtype);
    drupal_set_message(t('The :request created by :employee on :created was rejected by you', array(':request' => $type, ':employee' => $employee, ':created' => date('M/d/Y', $request->sdate))));
  }
  drupal_goto('requests');
}

function requests_home() {
  $employee = azur_user_return_employee();
  $output = '<div class ="metro metro-responsive-tiles panorama" "><div class="panorama-sections"><div class="panorama-section tile-span-3" >';
  $output .= '<a class="tile imagetext bg-color-azur activity-row square" href="send/request">Add requests</a>';
  $output .= '<a class="tile imagetext bg-color-azur activity-row square" href="your/' . $employee->eid . '/requests">Your requests</a>';
  $output .= '<a class="tile imagetext bg-color-azur activity-row square" href="assignedto/' . $employee->eid . '/requests">Requests assigned to you</a>';
  $output .= '</div></div>';
  return $output;
}
