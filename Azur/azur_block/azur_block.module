<?php
/**
 * Implements hook_block_info
 */
function azur_block_block_info() {
  $block = array();
  $block['azur_carousel'] = array(
    'info' => t('Carousel block'),
    'cache' => DRUPAL_NO_CACHE
  );
  $block['recent_activity'] = array(
    'info' => t('Recennt Activity'),
    'cache' => DRUPAL_NO_CACHE
  );
	$block['bid_manage'] = array(
	'info' => t('Bid Management'),
	'cache' => DRUPAL_NO_CACHE
	);
  return $block;
}

/**
 * Implements hook_block_view
 */
function azur_block_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'azur_carousel' :
      $carousel = azur_carousel_data_generation();
      $block = array(
        'subject' => t('Azur Carousel'),
        'content' => theme('azur_carousel_block', array('data' => $carousel)),
      );
      break;
    case 'recent_activity' :
      $block = array(
        'subject' => t('Recent Activity'),
        'content' => recent_activity_block_generate()
      );
      break;
		case 'bid_manage':
			$block = array(
			'subject' => t(''),
			'content' =>'<div class="btn">'.l('Generate Bid','add/bid').'</div>',
			);
			break;
  }
  return $block;
}

function azur_carousel_data_generation() {
  $carousel = array();
  $query = db_select('node', 'n');
  $query -> innerJoin('field_data_field_carousel_image', 'img', 'n.nid = img.entity_id');
  $query -> innerJoin('file_managed', 'file', 'img.field_carousel_image_fid = file.fid');
  $query -> leftJoin('field_data_field_carousel_data', 'data', 'n.nid = data.entity_id');
  $query -> leftJoin('azur_carousel_fields', 'effects', 'effects.nodeid = n.nid');
  $query -> fields('n', array('title'));
  $query -> fields('file', array('uri'));
  $query -> fields('data', array('field_carousel_data_value'));
  $query -> fields('effects', array('car_data'));
  $query -> condition('n.type', 'carousel', 'LIKE');
  $query -> condition('n.status', 1, '=');
  $result = $query -> execute();
  if (!empty($result)) {
    foreach ($result as $row) {
      $effects = unserialize($row -> car_data);
      $carousel[] = array(
        'title' => $row -> title,
        'img' => file_create_url($row -> uri),
        'data' => $row -> field_carousel_data_value,
        'type' => isset($effects['type']) ? $effects['type'] : '',
        'effects_title' => isset($effects['title']) ? $effects['title'] : '',
        'path' => isset($effects['path']) ? $effects['path'] : '',
        'button' => isset($effects['button']) ? $effects['button'] : '',
        'video_data' => isset($effects['video_data']) ? $effects['video_data'] : '',
        'case_data' => isset($effects['case_data']) ? $effects['case_data'] : '',
        'news_data' => isset($effects['news_data']) ? $effects['news_data'] : '',
        'more' => isset($effects['more']) ? $effects['more'] : ''
      );
    }
  }
  return $carousel;
}

/**
 * Implements hook_theme
 */
function azur_block_theme() {
  return array('azur_carousel_block' => array('variables' => array('data' => NULL)), );
}

function theme_azur_carousel_block($variables) {
  $effect = '';
  $output = '<div id="azur-carousel" class="carousel slide">
			<div class="carousel-inner">';
  if (!empty($variables['data'])) {
    foreach ($variables['data'] as $key => $value) {
      if ($value['type'] == 1) {
        if ($value['button'] == 1) {
          $effect = '<a href="' . $value['path'] . '" class="btn btn-primary">' . $value['effects_title'] . '</a>';
        }
        else {
          $effect = '<a href="' . $value['path'] . '">' . $value['effects_title'] . '</a>';
        }
      }
      else if ($value['type'] == 2) {
        $value['title'] = $value['effects_title'];
        $value['data'] = $value['news_data'];
        $effect = $value['more'];
      }
      else if ($value['type'] == 2) {
        $value['title'] = $value['effects_title'];
        $value['data'] = $value['news_data'];
        $effect = $value['more'];
      }
      else if ($value['type'] == 3) {
        $effect = '<div class="video_effect">' . $value['video_data'] . '</div>';
      }
      else if ($value['type'] == 4) {
        $value['title'] = $value['effects_title'];
        $value['data'] = $value['case_data'];
        $effect = $value['more'];
      }
      if ($key == 0) {
        $output .= '<div class="item active">
    		<img src=" ' . $value['img'] . '"/>
					<div class="container right-top">
						<div class="carousel-caption">
						<h1>' . $value['title'] . '</h1>
						<p class="lead">' . $value['data'] . '</p>' . $effect . ' </div>
			</div>
			</div>';
      }
      else {
        $output .= '<div class="item">
	<img src=" ' . $value['img'] . '"/>
					<div class="container right-top">
						<div class="carousel-caption">
						<h1>' . $value['title'] . '</h1>
						<p class="lead">' . $value['data'] . '</p>' . $effect . ' </div>
			</div>
			</div>';
      }
    }
  }
  $output .= '
		  </div>
			<a class="left carousel-control" href="#azur-carousel" data-slide="prev" id="prev_cntrl"> </a>
			<a class="right carousel-control" href="#azur-carousel" data-slide="next" id="next_cntrl"> </a>
		</div>';
  return $output;
}

/**
 * Implements hook_form_alter
 */
function azur_block_form_alter(&$form, &$form_state, $formid) {
  if ($formid == 'taxonomy_form_term') {

  }
  else if ($formid == 'carousel_node_form') {
    $default = array();
    $edit = arg(2);
    if ($edit == 'edit') {
      $query = db_select('azur_carousel_fields', 'car') -> fields('car', array('car_data')) -> condition('nodeid', arg(1), '=') -> execute() -> fetchfield();
      $default = unserialize($query);
    }
    $form['link_container'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add Link'),
      '#title_display' => 'invisible',
      '#states' => array('visible' => array(
          ':input[name="add_video"]' => array('checked' => FALSE),
          ':input[name="add_news"]' => array('checked' => FALSE),
          ':input[name="add_case"]' => array('checked' => FALSE)
        )),
    );
    $form['link_container']['add_link'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add Link'),
      '#description' => t('Add a link on the carousel.'),
      '#default_value' => (isset($default['type']) && $default['type'] == 1) ? 1 : 0
    );
    $form['link_container']['link_function'] = array(
      '#type' => 'textfield',
      '#title' => t('Page to Link'),
      '#description' => t('Enter the url of the page that you want to link.'),
      '#states' => array('visible' => array(':input[name="add_link"]' => array('checked' => TRUE))),
      '#default_value' => (isset($default['path']) && $default['type'] == 1) ? $default['path'] : ''
    );
    $form['link_container']['link_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Link title'),
      '#description' => t('Enter the title you want to give for this link.'),
      '#states' => array('visible' => array(':input[name="add_link"]' => array('checked' => TRUE))),
      '#default_value' => (isset($default['title']) && $default['type'] == 1) ? $default['title'] : ''
    );
    $form['link_container']['link_button'] = array(
      '#type' => 'checkbox',
      '#description' => t('Check this to make this link abutton'),
      '#title' => t('Make this button'),
      '#states' => array('visible' => array(':input[name = "add_link"]' => array('checked' => TRUE))),
    );
    $form['video_container'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add Video'),
      '#title_display' => 'invisible',
      '#states' => array('visible' => array(
          ':input[name="add_link"]' => array('checked' => FALSE),
          ':input[name="add_news"]' => array('checked' => FALSE),
          ':input[name="add_case"]' => array('checked' => FALSE)
        )),
    );
    $form['video_container']['add_video'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add Video'),
      '#description' => t('Add a video on the carousel'),
      '#default_value' => (isset($default['type']) && $default['type'] == 3) ? 1 : 0
    );
    $form['video_container']['video_data'] = array(
      '#type' => 'textarea',
      '#title' => t('Video embed code'),
      '#description' => t('Copy the embed code from youtube and place it here. Also change the width and height to 400X300'),
      '#states' => array('visible' => array(':input[name="add_video"]' => array('checked' => TRUE))),
      '#default_value' => (isset($default['video_data']) && $default['type'] == 3) ? $video_data : ''
    );
    $form['news_container'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add news'),
      '#title_display' => 'invisible',
      '#states' => array('visible' => array(
          ':input[name="add_link"]' => array('checked' => FALSE),
          ':input[name="add_video"]' => array('checked' => FALSE),
          ':input[name="add_case"]' => array('checked' => FALSE)
        )),
    );
    $form['news_container']['add_news'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add news'),
      '#description' => t('Add a news item to the carousel'),
      '#default_value' => (isset($default['type']) && $default['type'] == 2) ? 1 : 0
    );
    $squery = db_select('node', 'n') -> fields('n', array(
      'nid',
      'title'
    )) -> condition('n.type', 'news', 'LIKE') -> execute() -> fetchAllKeyed();
    $form['news_container']['news_list'] = array(
      '#type' => 'select',
      '#title' => t('Select news item'),
      '#description' => t('Please select the news item that you want to add to the carousel'),
      '#options' => $squery,
      '#states' => array('visible' => array(':input[name="add_news"]' => array('checked' => TRUE))),
      '#default_value' => (isset($default['nid']) && $default['type'] == 2) ? $default['nid'] : 0
    );
    $form['case_container'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add Case study'),
      '#title_display' => 'invisible',
      '#states' => array('visible' => array(
          ':input[name="add_link"]' => array('checked' => FALSE),
          ':input[name="add_video"]' => array('checked' => FALSE),
          ':input[name="add_news"]' => array('checked' => FALSE)
        )),
    );
    $form['case_container']['add_case'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add news'),
      '#description' => t('Add a news item to the carousel'),
      '#default_value' => (isset($default['type']) && $default['type'] == 4) ? 1 : 0
    );
    $squery = db_select('node', 'n') -> fields('n', array(
      'nid',
      'title'
    )) -> condition('n.type', 'case study', 'LIKE') -> execute() -> fetchAllKeyed();
    $form['case_container']['case_list'] = array(
      '#type' => 'select',
      '#title' => t('Select news item'),
      '#description' => t('Please select the news item that you want to add to the carousel'),
      '#options' => $squery,
      '#states' => array('visible' => array(':input[name="add_news"]' => array('checked' => TRUE))),
      '#default_value' => (isset($default['nid']) && $default['type'] == 4) ? $default['type'] : 0
    );
  }
}

/**
 * Implements hook_node_insert
 */
function azur_block_node_insert($node) {
  if ($node -> type == 'carousel') {
    if ($node -> add_link == 1) {
      $car_data = array(
        'type' => 1,
        'title' => $node -> link_title,
        'path' => $node -> link_function,
        'button' => $node -> link_button
      );
      $data = serialize($car_data);
      $query = db_insert('azur_carousel_fields') -> fields(array(
        'nodeid' => $node -> nid,
        'car_data' => $data
      )) -> execute();
    }
    else if ($node -> add_news == 1) {
      $target_node = node_load($node -> news_list);
      $car_data = array(
        'type' => 2,
        'title' => $target_node -> title,
        'news_data' => substr($target_node -> body[LANGUAGE_NONE][0]['value'], 0, 120),
        'more' => l('Read more', 'node/' . $target_node -> nid),
        'nid' => $node -> news_list
      );
      $data = serialize($car_data);
      $query = db_insert('azur_carousel_fields') -> fields(array(
        'nodeid' => $node -> nid,
        'car_data' => $data
      )) -> execute();
    }
    else if ($node -> add_video == 1) {
      $car_data = array(
        'type' => 3,
        'video_data' => $node -> video_data,
      );
      $data = serialize($car_data);
      $query = db_insert('azur_carousel_fields') -> fields(array(
        'nodeid' => $node -> nid,
        'car_data' => $data
      )) -> execute();
    }
    else if ($node -> add_case == 1) {
      $target_node = node_load($node -> case_list);
      $car_data = array(
        'type' => 4,
        'title' => $target_node -> title,
        'case_data' => substr($target_node -> body[LANGUAGE_NONE][0]['value'], 0, 120),
        'more' => l('Read more', 'node/' . $target_node -> nid),
        'nid' => $node -> case_list
      );
      $data = serialize($car_data);
      $query = db_insert('azur_carousel_fields') -> fields(array(
        'nodeid' => $node -> nid,
        'car_data' => $data,
      )) -> execute();
    }
  }
}

/**
 * Implements hook_node_update
 */
function azur_block_node_update($node) {
  $delquery = db_delete('azur_carousel_fields') -> condition('nodeid', $node -> nid, '=');
  azur_block_node_insert($node);
}

/**
 * function to generate the Recent Activity block
 */
function recent_activity_block_generate() {
  $output = '';
  global $user;
  $squery = db_select('employee', 'e');
  $squery -> fields('e', array('eid'));
  $squery -> condition('uid', $user -> uid, '=');
  $eid = $squery -> execute() -> fetchField();
  $clk_data = employee_generate_clkin_details($eid);
  $req_date = employee_generate_request_data($eid);
  foreach ($clk_data as $row) {
    $output .= '<div class="tile imagetext bg-color-azur activity-row wide-extra"><div class="activity-data">' . $row['description'] . ' ' . $row['data'] . '</div></div>';
  }
  foreach ($req_date as $res) {
    $output .= '<div class="tile imagetext bg-color-azur activity-row wide-extra"><div class="activity-data">' . $res['description'] .'</div></div>';
  }
	if($output == '' ){
		$output .= '<div>No Content yet.</div>';
	}
	$output = '<div class ="metro metro-responsive-tiles panorama" "><div class="panorama-sections"><div class="panorama-section tile-span-1" >'.$output.'</div></div>';
  return $output;
}

/**
 * Generate clock in/out details for the recent activity block
 */
function employee_generate_clkin_details($eid) {
  $rows = array();
  $squery = db_select('empclkin', 'clk');
  $squery -> fields('clk', array(
    'clkin',
    'clkout'
  ));
  $squery -> condition('eid', $eid, '=');
  $squery -> orderBy('cid', 'DESC');
  $squery -> range(0, 1);
  $result = $squery -> execute();
  foreach ($result as $row) {
    if ($row -> clkout == NULL) {
      $rows[] = array(
        'description' => t('Last Clock In'),
        'data' => date('d/m/y/  H:i', $row -> clkin)
      );
    }
    else {
      $rows[] = array(
        'description' => t('Last Clock Out'),
        'data' => date('d/m/y/  H:i', $row -> clkout)
      );
    }
  }
  return $rows;
}

/**
 * Generate request data for the recent activity block
 */
function employee_generate_request_data($eid) {
  $rows = array();
  $squery = db_select('request', 'r');
  $squery -> fields('r', array(
    'rid',
    'rtype',
    'sdate',
    'adid',
    'eid'
  ));
  $squery -> orderBy('rid', 'DESC');
  $or = db_or() -> condition('eid', $eid, '=') -> condition('adid', $eid, '=');
  $result = $squery -> condition($or) -> range(0, 4) -> execute();
  foreach ($result as $row) {
    if ($row -> eid == $eid) {
      $rows[] = array('description' => t('You created a new'. l('request','your/'.$eid.'/requests').' on ') . date('d/m/y', $row -> sdate));
    }
    else {
      $rows[] = array('description' => t('A request has been'.l(' assigned to you','assignedto/'.$eid.'/requests').' on ') . date('d/m/y', $row -> sdate));
    }
  }
  return $rows;
}
