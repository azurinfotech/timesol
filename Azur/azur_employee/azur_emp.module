<?php
define('CONST_PERM_CREATE_EMPLOYEE', 'create employee');
define('CONST_PERM_EDIT_EMPLOYEE', 'edit employee');
define('CONST_PERM_ADDRESS', 'create address');

/**
 * Implements hook_permission().
 */
function azur_emp_permission() {
  return array(
    CONST_PERM_CREATE_EMPLOYEE => array('title' => t('Create Employee')),
    CONST_PERM_EDIT_EMPLOYEE => array('title' => t('Edit Employee')),
    CONST_PERM_ADDRESS => array('title' => t('Enter the address details'))
  );
}

/**
 * Implements hook_menu().
 */
function azur_emp_menu() {
  $items['add/employee'] = array(
    'title' => 'Employee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('azur_emp_form'),
    'access arguments' => array(CONST_PERM_CREATE_EMPLOYEE),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%/pdetails_edit'] = array(
    'title' => 'Edit Personal details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'azur_emp_form',
      1
    ),
    'access arguments' => array(CONST_PERM_EDIT_EMPLOYEE),
    'type' => MENU_LOCAL_TASK,
  );
  $items['employee/address/%/%'] = array(
    'title' => 'Address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'azur_emp_address_form',
      1,
      2
    ),
    'access arguments' => array(CONST_PERM_ADDRESS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['groups/autocomplete'] = array(
    'page callback' => 'groups_generate_autocomplete',
    'access arguments' => array(CONST_PERM_CREATE_EMPLOYEE),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * hook_form()
 * Employee Form.
 */
function azur_emp_form($form, &$form_state, $eid = 0) {
  global $user;
  $edit;
  if ($eid != 0) {
    $squery = db_select('employee', 'e');
    $squery -> leftJoin('address', 'addr', 'addr.eid = e.eid');
    $query -> leftJoin('og_membership', 'og', 'og.etid = e.eid');
    $query -> innerJoin('node', 'n', 'n.nid = og.gid');
    $query -> fields('n', array('title','nid'));
    $squery -> fields('addr', array('aid'));
    $squery -> fields('e', array(
      'firstname',
      'lastname',
      'mgr_id',
      'payment',
      'type',
      'sdate',
      'qualification'
    ));
    $edit = $squery -> condition('e.uid', $eid, '=') -> execute() -> fetchObject();
    $form['eid'] = array(
      '#type' => 'hidden',
      '#value' => $eid,
    );
    $form['aid'] = array(
      '#type' => 'hidden',
      '#value' => $edit -> aid,
    );
  }
  $form['firstname'] = array(
    '#type' => 'textfield',
    '#title' => t('Firstname'),
    '#default_value' => isset($edit) ? $edit -> firstname : '',
    '#maxlength' => '64',
    '#required' => TRUE,
  );
  $form['lastname'] = array(
    '#type' => 'textfield',
    '#title' => t('Lastname'),
    '#default_value' => isset($edit) ? $edit -> lastname : '',
    '#maxlength' => '64',
    '#required' => TRUE,
  );
  if (in_array('Intranet Admin', $user -> roles) || in_array('administrator', $user -> roles)) {
    $form['mgr_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Manager'),
      '#default_value' => isset($edit -> mgr_id) ? azur_employee_name($edit -> mgr_id) : '',
      '#autocomplete_path' => 'adminid/autocomplete',
      '#required' => TRUE,
    );
    $form['payment'] = array(
      '#type' => 'textfield',
      '#title' => t('Payment details'),
      '#description' => t('Enter the payment details. For partime employees and overtime pay for full time employees'),
      '#default_value' => isset($edit -> payment) ? $edit -> payment : 0,
    );
  }
  $form['departments'] = array(
    '#type' => 'textfield',
    '#title' => t('Department'),
    '#description' => t('Enter the department.'),
    '#autocomplete_path' => 'groups/autocomplete',
    '#default_value' => isset($edit->title) ?$edit -> title.'[Id:'.$edit -> nid.']': 0
  );
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type of an employee'),
    '#options' => azur_employee_type(),
    '#default_value' => isset($edit) ? $edit -> type : '',
  );
  $form['sdate'] = array(
    '#type' => 'date_popup',
    '#date_label_position' => 'within',
    '#title' => t('Start date'),
    '#default_value' => isset($edit) && !empty($edit -> sdate) ? date('Y-m-d', $edit -> sdate) : "",
    '#date_format' => variable_get('date_format_date_only', 'd/m/Y'),
    '#required' => TRUE,
  );
  $form['qualification'] = array(
    '#type' => 'textfield',
    '#title' => t('Qualification'),
    '#default_value' => isset($edit) ? $edit -> qualification : "",
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('class' => array('emp_save')),
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validate function for the form.
 */
function azur_emp_form_validate($form, &$form_state) {
  $value_id = autocomplete_get_id_func($form_state['values']['departments']);
  if (is_null($value_id)) {
    form_set_error('departments', t('Invalid option. No matching department'));
  }
}

/**
 * Employee Submit function
 */
function azur_emp_form_submit($form, &$form_state) {
  global $user;
  $fname = $form_state['values']['firstname'];
  $lname = $form_state['values']['lastname'];
  $type = $form_state['values']['type'];
  $sdate = strtotime($form_state['values']['sdate']);
  $qua = $form_state['values']['qualification'];
  $gid = autocomplete_get_id_func($form_state['values']['departments']);
  $eid = isset($form_state['values']['eid']) ? $form_state['values']['eid'] : 0;
  if ($eid != 0) {
    $aid = $form_state['values']['aid'];
    $del_user_from_group = db_delete('og_users_roles') -> condition('uid', $user -> uid, '=');
    $del_user_from_group -> condition('gid', $gid, '=');
    $del_user_from_group -> condition('group_type', 'node', 'LIKE') -> execute();
    db_delete('og_membership') -> condition('gid', $gid, '=') -> condition('etid', $user -> uid, '=') -> condition('entity_type', 'user', 'LIKE') -> condition('group_type', 'node', 'LIKE') -> execute();
    $updated = db_update('employee') -> fields(array(
      'firstname' => $fname,
      'lastname' => $lname,
      'type' => $type,
      'payment' => $form_state['values']['payment'],
      'mgr_id' => autocomplete_get_id_func($form_state['values']['mgr_id']),
      'sdate' => ($sdate),
      'qualification' => $qua,
    )) -> condition('eid', $eid, '=') -> execute();
    $og = new OgMembership;
    $og -> type = 'og_membership_type_default';
    $og -> etid = $user -> uid;
    $og -> entity_type = 'user';
    $og -> gid = $gid;
    $og -> group_type = 'node';
    $og -> state = 1;
    $og -> created = time();
    $og -> field_name = 'og_user_node';
    $og -> language = 'en';
    $og -> save();
  }
  else {
    $values = array(
      'firstname' => $fname,
      'lastname' => $lname,
      'type' => $type,
      'sdate' => ($sdate),
      'qualification' => $qua,
      'uid' => $user -> uid,
    );
    $eid = db_insert('employee') -> fields($values) -> execute();
    $og = new OgMembership;
    $og -> type = 'og_membership_type_default';
    $og -> etid = $user -> uid;
    $og -> entity_type = 'user';
    $og -> gid = $gid;
    $og -> group_type = 'node';
    $og -> state = 1;
    $og -> created = time();
    $og -> field_name = 'og_user_node';
    $og -> language = 'en';
    $og -> save();
  }
  drupal_goto('employee/address/' . $eid . '/0');
}

/**
 * Address Form
 */
function azur_emp_address_form($form, &$form_state, $eid = 0, $aid = 0) {
  $edit = NULL;
  if ($aid != 0) {
    $query = db_select('address', 'addr') -> fields('addr');
    $query -> condition('eid', $eid);
    $edit = $query -> execute() -> fetchObject();
    $form['aid'] = array(
      '#type' => 'hidden',
      '#value' => $aid,
    );
  }
  $form['eid'] = array(
    '#type' => 'hidden',
    '#value' => $eid,
  );

  $form['address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Address'),
  );

  $form['address']['phone'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($edit) && isset($edit -> phone) ? $edit -> phone : '',
    '#title' => t('Mobile'),
    '#required' => TRUE,
    '#maxlength' => '16',
    '#size' => 16,
    '#element_validate' => array('azur_emp_element_validate_numeric'),
    '#attributes' => array('class' => array('auto-width')),
  );

  $form['address']['resphone'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($edit) && isset($edit -> resphone) ? $edit -> resphone : '',
    '#title' => t('Residence No.'),
    '#maxlength' => '16',
    '#size' => 16,
    '#element_validate' => array('azur_emp_element_validate_numeric'),
    '#attributes' => array('class' => array('auto-width')),
  );

  $form['address']['pincode'] = array(
    '#type' => 'textfield',
    '#title' => t('Pincode'),
    '#required' => TRUE,
    '#default_value' => isset($edit) && isset($edit -> pincode) ? $edit -> pincode : '',
    '#element_validate' => array('azur_emp_element_validate_numeric'),
    '#maxlength' => '10',
    '#size' => 16,
    '#attributes' => array('class' => array('auto-width')),
  );

  $form['location'] = array(
    '#type' => 'fieldset',
    '#title' => t('Loaction.'),
  );
  $form['location']['emp_address'] = array(
    '#type' => 'textarea',
    '#title' => t('Address'),
    '#required' => TRUE,
    '#default_value' => isset($edit) && isset($edit -> emp_address) ? $edit -> emp_address : '',
    '#attributes' => array('class' => array('auto-width')),
  );
  $country_options = azur_get_taxonomy_terms('country_hierarchy', 0, 1);
  $selected_country = isset($form_state['values']['country']) ? $form_state['values']['country'] : key($country_options);
  $form['location']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#name' => 'country',
    '#description' => t('Selet the Country.'),
    '#options' => $country_options,
    '#default_value' => $selected_country,
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'location_ajax_generator',
      'wrapper' => 'country-dropdown'
    ),
    '#required' => TRUE
  );
  $state_options = azur_get_taxonomy_terms('country_hierarchy', $selected_country, 1);
  $selected_state = isset($form_state['values']['state']) ? $form_state['values']['state'] : key($state_options);
  $form['location']['state'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#name' => 'state',
    '#description' => t('Select the State.'),
    '#prefix' => '<div id="country-dropdown">',
    '#suffix' => '</div>',
    '#required' => TRUE,
    '#options' => $state_options,
    '#ajax' => array(
      'callback' => 'location_ajax_generator',
      'wrapper' => 'city-dropdown',
      'event' => 'change'
    ),
  );

  $city_options = azur_get_taxonomy_terms('country_hierarchy', $selected_state, 1);
  $selected_city = isset($form_state['values']['city']) ? $form_state['values']['city'] : key($city_options);
  $form['location']['city'] = array(
    '#type' => 'select',
    '#title' => t('City'),
    '#name' => 'city',
    '#description' => t('Select the City.'),
    '#prefix' => '<div id="city-dropdown">',
    '#suffix' => '</div>',
    '#required' => TRUE,
    '#options' => $city_options,
    '#ajax' => array(
      'callback' => 'location_ajax_generator',
      'wrapper' => 'area-dropdown',
      'event' => 'change'
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('class' => array('emp_save')),
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Country Hierarchy Taxonomy
 */
function azur_get_taxonomy_terms($var, $parent, $depth, $get_vid = 0) {
  $terms = array();
  $vocabs = taxonomy_vocabulary_get_names();
  if ($get_vid) {
    return $vocabs[$var] -> vid;
  }
  $tree = taxonomy_get_tree($vocabs[$var] -> vid, $parent, $depth);
  foreach ($tree as $value) {
    $terms[$value -> tid] = $value -> name;
  }
  return $terms;
}

/**
 * Validate if the entered value is numeric
 */
function azur_emp_element_validate_numeric($element, &$form_state, $form) {
  if (!empty($element['#value']) && !is_numeric($element['#value'])) {
    form_error($element, t('!title must be numeric.', array('!title' => $element['#title'])));
  }
}

/**
 * Implements hook_theme
 */
function azur_emp_theme() {
  return array(
    'azur_emp_form' => array(
      'render element' => 'form',
      'template' => 'azur-emp-form'
    ),
    'azur_emp_address_form' => array(
      'render element' => 'form',
      'template' => 'azur-emp-address-form'
    ),
  );
}

//Type of Employees
function azur_employee_type($typ = '') {
  static $types;
  if (!isset($types)) {
    $types = array(
      1 => t('Permenant Qualified'),
      2 => t('Permenant Not Qualified'),
      3 => t('Contract'),
      4 => t('Part Time'),
    );
  }
  if (empty($typ)) {
    return $types;
  }
  elseif (isset($types[$typ])) {
    return $types[$typ];
  }
  else {
    return t('Invalid Option');
  }
}

/**
 * Country Taxonomy Ajax function.
 */
function location_ajax_generator($form, $form_state) {
  if ($form_state['triggering_element']['#name'] == 'country') {
    return $form['location']['state'];
  }
  else if ($form_state['triggering_element']['#name'] == 'state') {
    return $form['location']['city'];
  }
}

/**
 * Address Form Submit function.
 */
function azur_emp_address_form_submit($form, &$form_state) {
  $eid = $form_state['values']['eid'];
  $emp_add = $form_state['values']['emp_address'];
  $pincode = $form_state['values']['pincode'];
  $city = $form_state['values']['city'];
  $state = $form_state['values']['state'];
  $phone = $form_state['values']['phone'];
  $resphone = $form_state['values']['resphone'];
  $country = $form_state['values']['country'];
  $aid = isset($form_state['values']['aid']) ? $form_state['values']['aid'] : 0;
  if ($aid != 0) {
    $updated = db_update('address') -> fields(array(
      'emp_address' => $emp_add,
      'pincode' => $pincode,
      'city' => $city,
      'phone' => $phone,
      'resphone' => $resphone,
      'country' => $country,
      'state' => $state,
      'eid' => $eid,
    )) -> condition('aid', $aid, '=') -> execute();
    drupal_goto("home");
  }
  else {
    $values = array(
      'emp_address' => $emp_add,
      'pincode' => $pincode,
      'city' => $city,
      'phone' => $phone,
      'resphone' => $resphone,
      'country' => $country,
      'state' => $state,
      'eid' => $eid,
    );
    $eid = db_insert('address') -> fields($values) -> execute();
    drupal_goto("home");
  }
}

/**
 * hook_views_api for views module.
 */
function azur_emp_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'azur_emp') . '/views',
  );
}

/**
 * function to return the Employee from the user
 */
function azur_user_return_employee() {
  global $user;
  $query = db_select('employee', 'emp');
  $query -> fields('emp', array(
    'eid',
    'firstname',
    'lastname'
  ));
  $query -> condition('uid', $user -> uid, '=');
  $result = $query -> execute() -> fetchObject();
  return $result;
}

/**
 * autocomplete function for generating the groups
 */
function groups_generate_autocomplete($string = '') {
  $matches = array();
  $query = db_select('node', 'n') -> fields('n', array(
    'nid',
    'title'
  )) -> condition('n.title', '%' . db_like($string) . '%', 'LIKE');
  $query -> condition('n.type', 'departments', 'LIKE');
  $res = $query -> execute();
  foreach ($res as $row) {
    $matches[$row -> title . " [Id:$row->nid]"] = check_plain($row -> title);
  }
  return drupal_json_output($matches);
}

/**
 * function to fetch user name and user id
 */
function azur_employee_name($eid) {
  $query = db_select('employee', 'emp');
  $query -> fields('emp', array(
    'firstname',
    'lastname'
  ));
  $query -> condition('eid', $eid, '=');
  $res = $query -> execute() -> fetchObject();
  return $res -> firstname . ' ' . $res -> lastname;
}

function azur_employee_get_manager_id($eid) {
  $squery = db_select('employee', 'emp');
  $squery -> fields('emp', array('mgr_id'));
  $mgr_id = $squery -> condition('eid', $eid, '=') -> execute() -> fetchField();
}
